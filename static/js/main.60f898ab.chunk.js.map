{"version":3,"sources":["../../src/firebaseConfig.js","../../src/components/auth.js","../../src/index.js","App.js","index.js"],"names":["firebaseConfig","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseConfigAuth","auth","scopes","provider","style","onClick","scope","result","fetchAuthData","error","window","alert","React","userCredentials","user","this","state","credentials","componentDidMount","render","props","authProvider","SignOutHandler","App","useState","setUser","onSignOut","console","log","className","displayName","class","color","fontSize","backgroundColor","borderRadius","fetchUserData","userData","ReactDOM","document","getElementById"],"mappings":"6MAKA,MAUaA,EAAiBC,wBAVf,CACbC,OAAQC,0CACRC,WAAYD,0CACZE,YAAaF,iDACbG,UAAWH,0BACXI,cAAeJ,sCACfK,kBAAmBL,eACnBM,MAAON,8CAKIO,EAAN,OCZDC,EAAO,EAAC,uCAAsCC,aAClD,MAMA,UACE,cACEC,EAAW,IAAIH,EAAfG,oBACA,MACF,aACEA,EAAW,IAAIH,EAAfG,mBACA,MACF,eACEA,EAAW,IAAIH,EAAfG,qBACA,MACF,aACEA,EAAW,IAAIH,EAAfG,mBACA,MACF,gBACEA,EAAW,IAAIH,EAAJ,cAAXG,iBACA,MACF,YACEA,EAAW,IAAIH,EAAJ,cAAXG,aACA,MACF,QACEA,OA+BJ,OACE,6BACE,4BAAQC,MAAR,EAAsBC,QA3BT,UAEf,IAAIH,GACFA,UAAgBI,IACdH,gBAGJb,iCAGSiB,IACLC,EAAcD,EAAdC,QAJJlB,MAMUmB,IACN,kDAAIA,QACF,qBAAWC,QACTC,0IAKJH,EAAc,KAAdA,OAMF,gBAFJ,KCxDK,MAAM,UAAqBI,IAA3B,UAA2C,yCACxC,CAAEC,gBAAF,KAAyBJ,MAAO,MADQ,kBAGhCK,IAMd,GACEC,KAAA,sBAA+BA,KAAKC,MAApC,uBAV4C,mBAchC,CAACC,EAAaR,KAK5B,GACEM,KAAA,iCAEFA,KAAA,SAAc,CAAEF,gBAAF,EAAgCJ,MAAOA,KAGvDS,oBAME5B,4BAAyCyB,KAAzCzB,cAGF6B,SAKE,OACE,qBACEf,MAAOW,KAAKK,MADd,MAEEC,aAAcN,KAAKK,MAFrB,aAGElB,OAAQa,KAAKK,MAHf,OAIEZ,cAAeO,KAAKP,iBAMrB,MAAM,UAAsBI,IAA5B,UAA4C,kDAChC,KAEftB,wBAGQ,KACJyB,KAAA,wBAJJzB,MAMUmB,IACNM,KAAA,sBAINI,SACE,OACE,4BAAQf,MAAOW,KAAKK,MAApB,MAAiCf,QAASU,KAAKO,gBADjD,aCZWC,MAtDH,KAAO,MAAD,EACQC,mBAAS,MADjB,mBACTV,EADS,KACHW,EADG,KAaVC,EAAajB,IACZA,IACHkB,QAAQC,IAAI,cACZH,EAAQ,QAIZ,OAAIX,EAEA,yBAAKe,UAAU,aACb,wBAAIA,UAAU,SAAd,IAAwBf,EAAKgB,YAA7B,KACA,yBAAKC,MAAM,UACT,kBAAC,EAAD,CAAe3B,MAAO,CAAE4B,MAAO,MAAOC,SAAU,QAASP,UAAWA,MAO1E,yBAAKG,UAAU,aACb,wBAAIA,UAAU,SAAd,qBACA,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACER,aAAa,SACbjB,MAAO,CACL4B,MAAO,QACPE,gBAAiB,MACjBD,SAAU,OACVE,aAAc,OAEhBjC,OAAQ,CACN,mDACA,yCAEFkC,cA3Cc,CAACC,EAAUxB,EAAiBJ,KAC5CA,GACFkB,QAAQlB,MAAMA,GAEhBkB,QAAQC,IAAIf,GACZY,EAAQY,SCTZC,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,U","file":"static/js/main.60f898ab.chunk.js","sourcesContent":["// firebase dependencies\nimport * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\n// firebase configuration from env\nconst config = {\n  apiKey: process.env.REACT_APP_APIKEY,\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASEURL,\n  projectId: process.env.REACT_APP_PROJECTID,\n  storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n  appId: process.env.REACT_APP_APPID\n}\n\nexport const firebaseConfig = firebase.initializeApp(config)\n\nexport const firebaseConfigAuth = firebase.auth\n","import React from 'react'\n\n// importing firebase configuration and dependencies\nimport { firebaseConfig, firebaseConfigAuth } from '../firebaseConfig'\n\nconst auth = ({ authProvider, style, fetchAuthData, scopes }) => {\n  let provider\n\n  /*\n  switch cases to initialize an instance of the provider(Twitter, Google, etc.)\n  object according to the authProvider prop passed from parent(SocialAuth) component\n  */\n  switch (authProvider) {\n    case 'Twitter':\n      provider = new firebaseConfigAuth.TwitterAuthProvider()\n      break\n    case 'Google':\n      provider = new firebaseConfigAuth.GoogleAuthProvider()\n      break\n    case 'Facebook':\n      provider = new firebaseConfigAuth.FacebookAuthProvider()\n      break\n    case 'Github':\n      provider = new firebaseConfigAuth.GithubAuthProvider()\n      break\n    case 'Microsoft':\n      provider = new firebaseConfigAuth.OAuthProvider('microsoft.com')\n      break\n    case 'Apple':\n      provider = new firebaseConfigAuth.OAuthProvider('apple.com')\n      break\n    default:\n      provider = null\n  }\n\n  /* \n  method to handle sign-in functionality with firebase\n  */\n  const onSignIn = () => {\n    // provider = scopes ? provider.addScope(scopes) : provider\n    if (scopes !== undefined) {\n      scopes.forEach((scope) => {\n        provider.addScope(scope)\n      })\n    }\n    firebaseConfig\n      .auth()\n      .signInWithPopup(provider)\n      .then((result) => {\n        fetchAuthData(result, null)\n      })\n      .catch((error) => {\n        if (error.code === 'auth/account-exists-with-different-credential') {\n          if (typeof window !== 'undefined') {\n            alert(\n              'An account already exists with the same email address. You have already signed up with a different auth provider for that email.'\n            )\n          }\n        }\n        fetchAuthData(null, error)\n      })\n  }\n\n  return (\n    <div>\n      <button style={style} onClick={onSignIn}>\n        Sign In with {authProvider}\n      </button>\n    </div>\n  )\n}\n\nexport default auth\n","import React from 'react'\n\n// importing firebase configuration and dependencies\nimport { firebaseConfig } from './firebaseConfig'\n\nimport Auth from './components/auth'\n\nexport class SocialSignIn extends React.Component {\n  state = { userCredentials: null, error: null }\n\n  authListener = (user) => {\n    /* \n  a method that sets the userData state when a user signs-in and \n  it also sends that data back to the parent component with the help \n  of fetchUserData prop \n  */\n    if (user) {\n      this.props.fetchUserData(user, this.state.userCredentials, null)\n    }\n  }\n\n  fetchAuthData = (credentials, error) => {\n    /* \n    a method to fetch user credentials(after successful sign-in) \n    from auth component \n  */\n    if (error) {\n      this.props.fetchUserData(null, null, error)\n    }\n    this.setState({ userCredentials: credentials, error: error })\n  }\n\n  componentDidMount() {\n    /* \n    activating the firebase authentication state observer, it listens \n    for changes in the authentication state and executes the function(or observer)\n    passed to it everytime the authentication state changes \n  */\n    firebaseConfig.auth().onAuthStateChanged(this.authListener)\n  }\n\n  render() {\n    /*\n    The Auth component is rendered that provides the sign-in facility. \n    Props coming down from the parent are passed to the Auth component.\n    */\n    return (\n      <Auth\n        style={this.props.style}\n        authProvider={this.props.authProvider}\n        scopes={this.props.scopes}\n        fetchAuthData={this.fetchAuthData}\n      />\n    )\n  }\n}\n\nexport class SocialSignOut extends React.Component {\n  SignOutHandler = () => {\n    // a method to sign users out\n    firebaseConfig\n      .auth()\n      .signOut()\n      .then(() => {\n        this.props.onSignOut(null)\n      })\n      .catch((error) => {\n        this.props.onSignOut(error)\n      })\n  }\n\n  render() {\n    return (\n      <button style={this.props.style} onClick={this.SignOutHandler}>\n        Sign Out\n      </button>\n    )\n  }\n}\n","import React, { useState } from 'react'\n\nimport { SocialSignIn, SocialSignOut } from 'react-easy-auth'\n\nimport './index.css'\n\nconst App = () => {\n  const [user, setUser] = useState(null)\n\n  //a method to fetch the data after user signs-in\n  const fetchUserData = (userData, userCredentials, error) => {\n    if (error) {\n      console.error(error)\n    }\n    console.log(userCredentials)\n    setUser(userData)\n  }\n\n  // a method to handle user sign-out//\n  const onSignOut = (error) => {\n    if (!error) {\n      console.log('signed out')\n      setUser(null)\n    }\n  }\n\n  if (user) {\n    return (\n      <div className=\"container\">\n        <h3 className=\"title\"> {user.displayName} </h3>\n        <div class=\"button\">\n          <SocialSignOut style={{ color: 'red', fontSize: '10px'}} onSignOut={onSignOut} />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\"> Super Power App </h1>\n      <div className=\"button\">\n        <SocialSignIn\n          authProvider='Google'\n          style={{\n            color: 'white',\n            backgroundColor: 'red',\n            fontSize: '20px',\n            borderRadius: '5px'\n          }}\n          scopes={[\n            'https://www.googleapis.com/auth/androidpublisher',\n            'https://www.googleapis.com/auth/games'\n          ]}\n          fetchUserData={fetchUserData}   \n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}